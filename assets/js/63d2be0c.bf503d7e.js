"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[771],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=a,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return t?i.createElement(h,r(r({ref:n},u),{},{components:t})):i.createElement(h,r({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:a,r[1]=l;for(var c=2;c<o;c++)r[c]=t[c];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},895:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=t(7462),a=(t(7294),t(3905));const o={sidebar_position:1},r="SEF CLI Targets",l={unversionedId:"CLI/cli-targets",id:"CLI/cli-targets",title:"SEF CLI Targets",description:"The examples provided in this chapter assume an SEF Unit with 192 dies. In order to keep the",source:"@site/docs/CLI/cli-targets.md",sourceDirName:"CLI",slug:"/CLI/cli-targets",permalink:"/SEF-SDK/CLI/cli-targets",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"Command Line Interface (CLI)",permalink:"/SEF-SDK/CLI/overview"},next:{title:"Extending SEF CLI",permalink:"/SEF-SDK/CLI/extending-cli"}},s={},c=[{value:"SEF Unit",id:"sef-unit",level:2},{value:"Virtual Device Target",id:"virtual-device-target",level:2},{value:"Create Virtual Devices",id:"subsec-virtualDeviceCreate",level:3},{value:"Auto Placement of Virtual Devices",id:"auto-placement-of-virtual-devices",level:4},{value:"Figure 6: Virtual Device Configuration Auto Placement",id:"fig-VirtualDeviceConfigSmart",level:4},{value:"Using a Die Map for Virtual Devices",id:"using-a-die-map-for-virtual-devices",level:4},{value:"Figure 7: Virtual Device Configuration Die Map",id:"fig-VirtualDeviceDieMap",level:4},{value:"Creation Time Configuration",id:"creation-time-configuration",level:4},{value:"Deleting Virtual Devices",id:"subsec-virtualDeviceDelete",level:3},{value:"Common Actions",id:"common-actions",level:3},{value:"Configuring a Virtual Device",id:"configuring-a-virtual-device",level:3},{value:"QoS Domain Target",id:"qos-domain-target",level:2},{value:"Creating a QoS Domain",id:"subsec-qosDomainCreate",level:3},{value:"Creation Time Configuration",id:"creation-time-configuration-1",level:4},{value:"Deleting a QoS Domain",id:"subsec-QosDomainDelete",level:3},{value:"Common Actions",id:"subsec-QosDomainCommon",level:3},{value:"QoS Domain Label",id:"subsec-QosDomainLabel",level:3},{value:"Resizing a QoS Domain",id:"subsec-QosDomainResize",level:3},{value:"Formatting a QoS Domain",id:"subsec-qosDomainFormat",level:3},{value:"Backing Up and Restoring QoS Domains",id:"subsec-qosDomainBackup",level:3},{value:"FTL Target",id:"subsec-cliExFTL",level:2},{value:"Shell Target: Using an SEF Unit Interactively",id:"section:shell",level:2}],u={toc:c},d="wrapper";function p(e){let{components:n,...o}=e;return(0,a.kt)(d,(0,i.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"sef-cli-targets"},"SEF CLI Targets"),(0,a.kt)("p",null,"The examples provided in this chapter assume an SEF Unit with 192 dies. In order to keep the\nexamples easy to understand, the long versions of the options are used; however, most common\noptions have short versions available. A confirmation prompt appears following many of the available\ncommands, but using the ",(0,a.kt)("inlineCode",{parentName:"p"},"--force")," flag (present in most examples below) allows the user to bypass\nthis confirmation."),(0,a.kt)("h2",{id:"sef-unit"},"SEF Unit"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"sef-unit")," target is used to list and get information about the installed SEF Units using ",(0,a.kt)("inlineCode",{parentName:"p"},"list"),"\nand ",(0,a.kt)("inlineCode",{parentName:"p"},"info")," actions."),(0,a.kt)("p",null,"The following example uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," action to list all the SEF Units installed on the machine."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo sef-cli list sef-unit\nSEF Unit Index         Vendor       FW Version        HW Version        Channels        Banks\nSEF Unit 0                          1LMSS529                            8               24\nSEF Unit Count 1\n$\n")),(0,a.kt)("p",null,"Additional information about a specific SEF Unit can be acquired using the ",(0,a.kt)("inlineCode",{parentName:"p"},"info")," action. The\nfollowing example prints the information for an SEF Unit installed at index 0."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo sef-cli info sef-unit --sef-index 0\nvendor: /dev/sef0\nvendor:\nserialNumber: P21L23E00193                     1LMSS529\nFWVersion: 1LMSS529\nHWVersion:\nsupported Options:\n* kPackedSupported\n* kSuperBlockSupported\n* kAutomaticSupported\n* kFastestSupported\n* kTypicalSupported\n* kLongSupported\n* kHeroicSupported\n* kStopSupported\n* kPSLCSupported\n* kDeleteVirtualDeviceSupported\nunitNumber: 0\nAPIVersion: 270\nsupportedOptions: 2614402\nmaxQoSDomains: 512\nmaxRootPointers: 8\nmaxPlacementIDs: 16\nmaxOpenSuperBlocks: 0\nnumReadQueues: 384\nnumVirtualDevices: 4\nnumQoSDomains: 0\nnumBanks: 24\nnumChannels: 8\nnumPlanes: 2\npageSize: 16384\nnumPages: 1792\nnumBlocks: 3294\ntotalBandWidth: 0\nreadTime: 0\nprogramTime: 0\neraseTime: 0\nminReadWeight: 32\nminWriteWeight: 256\nopenExpirationPeriod: 0\nADUsize(1):\n* data:meta\n* 4096:16\n$\n")),(0,a.kt)("h2",{id:"virtual-device-target"},"Virtual Device Target"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"virtual-device")," target is used to create, list, delete, configure, and get information about\nVirtual Devices."),(0,a.kt)("h3",{id:"subsec-virtualDeviceCreate"},"Create Virtual Devices"),(0,a.kt)("p",null,"The create action is used to create all Virtual Devices within an SEF Unit. This action supports\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"--force / -f")," flag to create the Virtual Devices without asking for confirmation. Moreover,\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"--verbose / -V")," flag, when provided, prints the configuration to be created."),(0,a.kt)("p",null,"Virtual Devices can be created using either auto place or die map."),(0,a.kt)("h4",{id:"auto-placement-of-virtual-devices"},"Auto Placement of Virtual Devices"),(0,a.kt)("p",null,"Auto place positions Virtual Devices at the best location given the input configuration. Auto place\nrequires channel-num, bank-num, and repeat-num in lists of space-separated numbers denoting\nthe number of channels and banks for each Virtual Device. The repeat-num option denotes how\nmany times each channel and bank configuration should be repeated. If the proposed configuration\ndoes not fill the device, the user will be asked to confirm the proposed configuration; this confirmation\nis skipped when the ",(0,a.kt)("inlineCode",{parentName:"p"},"--force / -f")," flag is given. The ",(0,a.kt)("inlineCode",{parentName:"p"},"--virtual-device-id / -v")," option is\nused as the starting Virtual Device ID, and the remaining Virtual Device IDs are incremented by\none."),(0,a.kt)("p",null,"The auto configuration algorithm fills the device with Virtual Devices, from largest to smallest.\nThese Virtual Devices are placed across Channels and then Banks."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have an empty SEF Unit. Delete Virtual Devices following directions in\nSection ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-virtualDeviceDelete"},"Deleting Virtual Devices"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli create virtual                    \\\n       --sef-index 0                             \\\n       --virtual-device-id 2                     \\\n      --channel-num         "2 2 1 8"            \\\n      --bank-num            "2 3 1 20"           \\\n      --repeat-num          "2 3 1 1"            \\\n      --verbose                                  \\\n      --force\nDie Map:\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n2      2      2      2      2      2      2      2\n3      3      4      4      5      5      6      6\n3      3      4      4      5      5      6      6\n3      3      4      4      5      5      7      7\n8      0      0      0      0      0      7      7\nThe Virtual Devices for SEF Unit 0 was successfully created\n$\n')),(0,a.kt)("p",null,"The above example command results in the Virtual Device configuration in Figure ",(0,a.kt)("a",{parentName:"p",href:"#fig-VirtualDeviceConfigSmart"},"6"),".\nThe figure only shows the last 32 dies for simplicity. The\nfirst 160 dies are configured with a single Virtual Device as a filler to simplify the example."),(0,a.kt)("h4",{id:"fig-VirtualDeviceConfigSmart"},"Figure 6: Virtual Device Configuration Auto Placement"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Virtual Device Configuration Auto Placement",src:t(3259).Z,width:"880",height:"529"})),(0,a.kt)("h4",{id:"using-a-die-map-for-virtual-devices"},"Using a Die Map for Virtual Devices"),(0,a.kt)("p",null,"The die map creation method provides complete control over how each die is assigned to a Virtual\nDevice. To use this method, pass in a space-separated list of Virtual Device IDs using the die-map\noption. The Virtual Device IDs should be passed in bank by bank, from the lowest channel to the\nhighest channel per bank. The Virtual Device ID of 0 leaves a die unused and unassigned."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have an empty SEF Unit. Delete Virtual Devices following directions in\nSection ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-virtualDeviceDelete"},"Deleting Virtual Devices"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli create virtual             \\\n      --sef-index 0                       \\\n      --verbose                           \\\n      --force                             \\\n      --die-map "2 2 0 0 0 0 9 9          \\\n          2 2 4 4 3 3 9 9                 \\\n          2 2 4 4 3 3 9 9                 \\\n          2 2 0 0 0 0 9 9                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0                 \\\n          0 0 0 0 0 0 0 0"\nDie Map:\n2      2      0      0      0      0      9      9\n2      2      4      4      3      3      9      9\n2      2      4      4      3      3      9      9\n2      2      0      0      0      0      9      9\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\nThe Virtual Devices for SEF Unit 0 was successfully created\n$\n')),(0,a.kt)("p",null,"The above example command results in the Virtual Device configuration in Figure ",(0,a.kt)("a",{parentName:"p",href:"#fig-VirtualDeviceDieMap"},"7"),".\nThe figure only shows the first 32 dies for simplicity; other dies are not configured."),(0,a.kt)("h4",{id:"fig-VirtualDeviceDieMap"},"Figure 7: Virtual Device Configuration Die Map"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Virtual Device Configuration Die Map",src:t(5562).Z,width:"869",height:"529"})),(0,a.kt)("h4",{id:"creation-time-configuration"},"Creation Time Configuration"),(0,a.kt)("p",null,"Additional configurations can be applied while creating a Virtual Device."),(0,a.kt)("p",null,"Option ",(0,a.kt)("inlineCode",{parentName:"p"},"--super-block")," is an array of tuples which is used to set the number of dies per Super\nBlock. The default dies per Super Block is the number of dies in the Virtual Device. The supplied\nvalue should be divisible by the number of dies in the Virtual Device. Another configuration that\ncan be applied is option ",(0,a.kt)("inlineCode",{parentName:"p"},"--read-weight")," which is an array of tuples that is used to override the\ndefault weights for read operations for each possible read queue."),(0,a.kt)("p",null,"The example below creates a set of Virtual Devices similar to the previous example but overrides\nthe number of dies per Super Block and default read weights."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have an empty SEF Unit. Delete Virtual Devices following directions in\nSection ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-virtualDeviceDelete"},"Deleting Virtual Devices"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli create virtual         \\\n      --sef-index 0                   \\\n      --verbose                       \\\n      --force                         \\\n      --die-map "2 2 0 0 0 0 9 9      \\\n           2 2 4 4 3 3 9 9            \\\n           2 2 4 4 3 3 9 9            \\\n           2 2 0 0 0 0 9 9            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0            \\\n           0 0 0 0 0 0 0 0"           \\\n    --super-block "2:1 9:4"           \\\n    --read-weight "2:500 2:800 \\\n           2:1000 3:500"\nWarning: The read weight for the Virtual Device 9 was not specified\nWarning: The read weight for the Virtual Device 4 was not specified\nDie Map:\n2      2      0      0      0      0      9      9\n2      2      4      4      3      3      9      9\n2      2      4      4      3      3      9      9\n2      2      0      0      0      0      9      9\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\nThe Virtual Devices for SEF Unit 0 was successfully created\n$\n')),(0,a.kt)("p",null,"The above example results in the same Virtual layout as Figure ",(0,a.kt)("a",{parentName:"p",href:"#fig-VirtualDeviceDieMap"},"7"),".\nHowever, Super Blocks in Virtual Device 2 will be\nstriped across a single die, and Super Blocks in Virtual Device 9 will be striped across 4 dies.\nMoreover, the weights for the first three read queues for Virtual Device 2 will be overridden, and\nthe value for the first read queue for Virtual Device 3 is also overridden."),(0,a.kt)("h3",{id:"subsec-virtualDeviceDelete"},"Deleting Virtual Devices"),(0,a.kt)("p",null,"Virtual Devices can only be deleted all at once. The delete action is used to delete the\nVirtual Devices within an SEF Unit. The Virtual Devices should be empty before they can\nbe deleted. In other words, if a QoS Domain is created on a Virtual Device they should be\ndeleted before deleting all Virtual Devices. Directions for deleting a QoS Domain is found in\nSection ",(0,a.kt)("a",{parentName:"p",href:"/SEF-SDK/CLI/cli-targets#subsec-QosDomainDelete"},"Deleting a QoS Domain"),"."),(0,a.kt)("p",null,"The following command deletes the Virtual Devices in SEF Unit 0."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have an SEF Unit with created Virtual Devices. Create Virtual Devices\nfollowing directions in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-virtualDeviceCreate"},"Create Virtual Devices"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo sef-cli delete virtual       \\\n      --sef-index 0                 \\\n      --force                       \\\n      --verbose\nAll Virtual Devices in SEF Unit 0 were successfully deleted\n$\n")),(0,a.kt)("h3",{id:"common-actions"},"Common Actions"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: All actions in this section should have an SEF Unit with created Virtual Devices.\nCreate Virtual Devices following directions in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-virtualDeviceCreate"},"Create Virtual Devices"))),(0,a.kt)("p",null,"The list action lists the Virtual Devices. Moreover, if the ",(0,a.kt)("inlineCode",{parentName:"p"},"--verbose / -V")," flag is provided,\nlist will print the command to recreate the same Virtual Device configuration."),(0,a.kt)("p",null,"The following command shows how to list all created Virtual Devices in SEF Unit 0."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli list virtual-device        \\\n      --sef-index 0                       \\\n      --verbose\nExample output\nVirtual Device ID                Flash Cap           Flash Avail        SB Cap          SB Dies\nVirtual Device 2                 356679680           356565000          114688          8\nVirtual Device 3                 181608448           181551112          57344           4\nVirtual Device 4                 182411264           182353928          57344           4\nVirtual Device 9                 350715904           350601224          114688          8\nVirtual Device Count 4\nRecreate Command:\nsef-cli create virtual-device -s 0 --die-map "2 2 0 0 0 0 9 9 2 2 4 4 3 3 9 9 2\n 2 4 4 3 3 9 9 2 2 0 0 0 0 9 9 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"\n$\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"draw")," action prints the current configuration of the Virtual Devices within the SEF Unit. draw\nis useful when trying to picture the current location of the created Virtual Devices."),(0,a.kt)("p",null,"The following command draws current configuration of Virtual Devices in SEF Unit 0."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo sef-cli draw virtual-device              \\\n      --sef-index 0\nDie Map:\n2      2      0      0      0      0      9      9\n2      2      4      4      3      3      9      9\n2      2      4      4      3      3      9      9\n2      2      0      0      0      0      9      9\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n0      0      0      0      0      0      0      0\n$\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"info")," action prints detailed information about the Virtual Device."),(0,a.kt)("p",null,"The following command prints Virtual Device information for Virtual Device 2 at SEF Unit 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo sef-cli info virtual-device                   \\\n      --sef-index 0                                  \\\n      --virtual-device-id 2                          \\\n      --verbose\nVirtualDeviceId: 2\nflashCapacity: 356679680\nflashAvailable: 356565000\npSLCFlashCapacity: 286720\npSLCFlashAvailable: 172040\nsuperBlockCapacity: 114688\npSLCSuperBlockCapacity: 28672\nmaxOpenSuperBlocks: 4294967295\nnumPSLCSuperBLocks: 10\nsuspendConfig-\n* maxTimePerSuspend: 0\n* minTimeUntilSuspend: 0\n* maxSuspendInterval: 0\nsuperBlockDies: 8\naduOffsetBitWidth: 24\nsuperBlockIdBitWidth: 24\nRead Queues Weights (1):\n* Read Weight 32\nQoS Domains: None\nDies (8):\n* Die 0\n* Die 1\n* Die 8\n* Die 9\n* Die 16\n* Die 17\n* Die 24\n* Die 25\neraseCount: 0\nnumUnallocatedSuperBlocks: 3110\nnumSuperBlocks: 0\nnumUnallocatedPSLCSuperBlocks: 10\nnumPSLCSuperBlocks: 0\naveragePEcount: 0\nmaxPEcount: 0\npatrolCycleTime: 26416\n$\n")),(0,a.kt)("h3",{id:"configuring-a-virtual-device"},"Configuring a Virtual Device"),(0,a.kt)("p",null,"The Virtual Device engine provides set-pslc and set-suspend-config actions to further\nconfigure a Virtual Device."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"set-pslc")," action is used to set the number of pSLC Super Blocks for the Virtual Device.\nThe following command sets the pSLC Super Blocks for Virtual Device 1."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have an SEF Unit with created Virtual Devices. Create Virtual Devices\nfollowing directions in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-virtualDeviceCreate"},"Create Virtual Devices"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo sef-cli set-pslc virtual-device                 \\\n      --sef-index 0                                    \\\n      --virtual-device-id 2                            \\\n      --num-pslc-super-block 50                        \\\n      --force --verbose\nThe number of pSLC Super Blocks for Virtual Devices 2 was successfully\n      set\n$\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"set-suspend-config")," action is used to set the configuration for the suspend functionality\nof the Virtual Device. Not all options are required when setting the suspend configuration."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have an SEF Unit with created Virtual Devices. Create Virtual Devices\nfollowing directions in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-virtualDeviceCreate"},"Create Virtual Devices"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo sef-cli set-suspend-config virtual-device                        \\\n      --sef-index 0                                                     \\\n      --virtual-device-id 2                                             \\\n      --suspend-max-time-per 100                                        \\\n      --suspend-min-time-until 100                                      \\\n      --suspend-max-interval 100                                        \\\n      --force                                                           \\\n      --verbose\n$\n")),(0,a.kt)("h2",{id:"qos-domain-target"},"QoS Domain Target"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"qos-domain")," target is used to list, create, delete, backup, restore, modify, and get information\nabout QoS Domains."),(0,a.kt)("h3",{id:"subsec-qosDomainCreate"},"Creating a QoS Domain"),(0,a.kt)("p",null,"The create action of the qos-domain target is used to create a QoS Domain. This action supports\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"--force / -f")," flag, for creating the QoS Domain without asking for confirmation."),(0,a.kt)("p",null,"When creating a QoS Domain, the QoS Domain ID, a unique identifier of the QoS Domain, is\nreturned by the SEF Unit. This can make scripting difficult, given that the returned ID is non-\ndeterministic. A QoS Domain\u2019s label is a 128-bit unique signature used to identify the QoS Domain.\nThese labels can be used to find and perform operations on QoS Domains. The label is stored on\nthe last two root pointers of the QoS Domain. The ",(0,a.kt)("inlineCode",{parentName:"p"},"--label / -l")," option is used to label a QoS\nDomain. The QoS Domain can be relabeled using the ",(0,a.kt)("inlineCode",{parentName:"p"},"label")," action."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have an SEF Unit with created empty Virtual Devices. Create Virtual Devices\nfollowing directions in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-virtualDeviceCreate"},"Create Virtual Devices"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli create qos                                         \\\n      --sef-index 0                                               \\\n      --virtual-device-id 1                                       \\\n      --label "61300673829223 888776657572036"                    \\\n      --flash-capacity 1024000                                    \\\n      --defect-strategy "kPacked"                                 \\\n      --verbose                                                   \\\n      --force\nWarning: The value of the erase weight 0 is below the recommended number of 256\nWarning: The value of the program weight 0 is below the recommended number of 256\nThe QoS Domain 1 was successfully created\n$\n')),(0,a.kt)("p",null,"The example above creates a QoS Domain with label of ",(0,a.kt)("inlineCode",{parentName:"p"},"61300673829223 888776657572036"),"\non the SEF Unit 0 and Virtual Device ID of 1 with a size of 1024000 ADUs. In other words, the\ncreated QoS Domain has a size of 4,194,304 MB, assuming the default ADU size of 4096 bytes. If\nthe Virtual Device does not have enough space available, the QoS Domain is not created, and an\nerror is returned. This action assumes many default options, such as those pertaining to WFQ\nqueues."),(0,a.kt)("h4",{id:"creation-time-configuration-1"},"Creation Time Configuration"),(0,a.kt)("p",null,"Additional configurations can be applied while creating a QoS Domain."),(0,a.kt)("p",null,"The option ",(0,a.kt)("inlineCode",{parentName:"p"},"--read-queue "),"is used to set the default read queue that should be used for read\noperations. The options ",(0,a.kt)("inlineCode",{parentName:"p"},"--program-weight")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"--erase-weight")," are used to set the default\nprogram and erase weights."),(0,a.kt)("p",null,"The example below creates a similar QoS Domain to the previous example but overrides the assigned\nqueues and the default values for program and erase weights."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Should have an SEF Unit with created empty Virtual Devices. Create Virtual Devices following\ndirections in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-virtualDeviceCreate"},"Create Virtual Devices"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli create qos                                             \\\n      --sef-index 0                                                   \\\n      --virtual-device-id 2                                           \\\n      --label "61300673829223 888776657572036"                        \\\n      --flash-capacity 1024000                                        \\\n      --read-queue 1                                                  \\\n      --program-weight 500                                            \\\n      --erase-weight 500                                              \\\n      --defect-strategy "kPacked"                                     \\\n      --verbose                                                       \\\n      --force\nThe QoS Domain 1 was successfully created\n$\n')),(0,a.kt)("h3",{id:"subsec-QosDomainDelete"},"Deleting a QoS Domain"),(0,a.kt)("p",null,"QoS Domains can be deleted one at a time. The ",(0,a.kt)("inlineCode",{parentName:"p"},"delete")," action is used to delete a specific QoS\nDomain."),(0,a.kt)("p",null,"The following command deletes the QoS Domain with specified label."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have a Virtual Device with created a QoS Domain. Create QoS Domain\nfollowing directions in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-qosDomainCreate"},"Creating a QoS Domain"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli delete qos-domain                                 \\\n      --sef-index 0                                              \\\n      --label "61300673829223 888776657572036"                   \\\n      --force                                                    \\\n      --verbose\nThe QoS Domain was successfully deleted\n$\n')),(0,a.kt)("h3",{id:"subsec-QosDomainCommon"},"Common Actions"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: All actions in this section should have a Virtual Device with created a QoS Domain.\nCreate QoS Domain following directions in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-qosDomainCreate"},"Creating a QoS Domain"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," action lists the QoS Domains defined in an SEF Unit. Moreover, if the ",(0,a.kt)("inlineCode",{parentName:"p"},"--verbose")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"-V"),"\nflag is provided, ",(0,a.kt)("inlineCode",{parentName:"p"},"list")," will print the command to recreate the same QoS Domain configuration."),(0,a.kt)("p",null,"The following command lists all the created QoS Domains in SEF Unit 0."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudosef-cli list qos-domain             \\\n      --sef-index 0                       \\\n      --verbose\nQoS Domain ID              VD ID       Capacity          Label\nQoS Domain 1               2           1024000\n      [61300673829223,888776657572036]\nQoS Domain Count 1\nRecreate Command:\nsef-cli create qos-domain -s 0 -v 2 --flash-capacity 1024000\n    --max-open-super-blocks 2 --defect-strategy "kPacked"\n$\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"info")," action prints detailed information about the QoS Domain."),(0,a.kt)("p",null,"The following command prints QoS Domain Information for QoS Domain with specified label in\nSEF Unit 0"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli info qos-domain                      \\\n    --sef-index 0                                   \\\n    --label "61300673829223 888776657572036"        \\\n    --verbose\nqosDomainId: 1\nqosDomainLabel: [61300673829223, 888776657572036]\nvirtualDeviceID: 2\nnumPlacementIDs: 1\nmaxOpenSuperBlocks: 2\nencryption: Enabled\nrecoveryMode: Automatic\ndefectStrategy: Packed\napi: SuperBlock\nflashCapacity: 1024000\nflashQuota: 1024000\nflashUsage: 0\npSLCFlashCapacity: 0\npSLCFlashQuota: 0\npSLCFlashUsage: 0\nADUSize:\n* Data: 4096\n* Meta: 0\nsuperBlockCapacity: 114688\npSLCSuperBlockCapacity: 28672\nmaxOpenSuperBlocks: 2\ndefectMapSize: 0\ndeadline: Typical\ndefaultReadQueue: 0\nWeights:\n* erase: 256\n* program: 256\n* rootPointer (0): 0x0\n* rootPointer (1): 0x0\n* rootPointer (2): 0x0\n* rootPointer (3): 0x0\n* rootPointer (4): 0x0\n* rootPointer (5): 0x0\n* rootPointer (6): 0x37c0ace35967\n* rootPointer (7): 0x3285670f590c4\n$\n')),(0,a.kt)("h3",{id:"subsec-QosDomainLabel"},"QoS Domain Label"),(0,a.kt)("p",null,"A QoS Domain can either be labeled when it is created or using the ",(0,a.kt)("inlineCode",{parentName:"p"},"label")," action. The ",(0,a.kt)("inlineCode",{parentName:"p"},"label")," action\ncan override a QoS Domain that is already labeled if the ",(0,a.kt)("inlineCode",{parentName:"p"},"--force / -f")," flag is provided."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have a Virtual Device with created a QoS Domain. Create QoS Domain\nfollowing directions in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-qosDomainCreate"},"Creating a QoS Domain"))),(0,a.kt)("p",null,"The following command labels a created QoS Domain with QoS Domain Id 1 on SEF Unit 0."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli label QoS-Domain                               \\\n      --sef-index 0                                           \\\n      --qos-domain-id 1                                       \\\n      --label "61300673829223 888776657572036"                \\\n      --verbose --force\nQoS Domain 1 was successfully labeled\n$\n')),(0,a.kt)("h3",{id:"subsec-QosDomainResize"},"Resizing a QoS Domain"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: All actions in this section should have a Virtual Device with created a QoS Domain.\nCreate QoS Domain following directions in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-qosDomainCreate"},"Creating a QoS Domain"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"resize")," action is used to modify an existing QoS Domain\u2019s size. The action can resize both\nQLC and pSLC capacity and quota; however, the operations have to be done using two separate\ncommands."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli resize qos-domain                              \\\n      --sef-index 0                                           \\\n      --label "61300673829223 888776657572036"                \\\n      --flash-capacity 1024000                                \\\n      --flash-quota         1024000                           \\\n      --force --verbose\nQoS Domain 1 was successfully resized\n$ sudo sef-cli resize qos-domain                              \\\n      --sef-index 0                                           \\\n      --label "61300673829223 888776657572036"                \\\n      --pslc-capacity 1024000                                 \\\n      --pslc-quota         1024000                            \\\n      --force --verbose\nQoS Domain 1 was successfully resized\n$\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"--flash-quota")," option is shared for both resize types and will be used accordingly."),(0,a.kt)("h3",{id:"subsec-qosDomainFormat"},"Formatting a QoS Domain"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"format")," action is used to delete all the data stored on the QoS Domain. In other words, the\naction does not delete the QoS Domain but just the data that is stored, including root pointers and\nall the metadata."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"--relabel")," flag will make sure to retain the current label of the QoS Domain."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have a Virtual Device with created a QoS Domain. Create QoS Domain\nfollowing directions in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-qosDomainCreate"},"Creating a QoS Domain"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli format qos-domain                               \\\n      --sef-index 0                                            \\\n      --label "61300673829223 888776657572036"                 \\\n      --relabel                                                \\\n      --force --verbose\nQoS Domain 1 was successfully formatted\n$\n')),(0,a.kt)("h3",{id:"subsec-qosDomainBackup"},"Backing Up and Restoring QoS Domains"),(0,a.kt)("p",null,"SEF-CLI provides actions to back up and restore the data and metadata stored within a QoS\nDomain. The data is backed up and restored as-is. In other words, the data and structures stored\non the QoS Domain are neither updated nor modified while backing up or restoring. For example,\nif the data has structures that point to each other, the references and addresses are not changed\nand will break."),(0,a.kt)("p",null,"The data is stored in separate files. Each file contains the data for a single Super Block."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"--path")," option points to the directory where the backed up data is stored. The directory is\nmade by the backup process. The command below backs up the data of the QoS Domain in its\nentirety in the directory."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have a Non-empty QoS Domain. Create QoS Domain following directions\nin Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-qosDomainCreate"},"Creating a QoS Domain"),". Populate the QoS Domain using FIO explained in\nChapter ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/FIO/overview#chap-fio"},"FIO")," or Python Sell explained in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#section:shell"},"Shell Target"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli backup qos                                        \\\n      --sef-index 0                                              \\\n      --label "61300673829223 888776657572036"                   \\\n      --path "/tmp/SefBackup"\n$\n')),(0,a.kt)("p",null,"The following command will restore a backed up QoS Domain\u2019s data and metadata from the\ngenerated files."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have a empty QoS Domain. Create QoS Domain following directions in\nSection ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-qosDomainCreate"},"Creating a QoS Domain")," or format an existing domain following directions in Section\n",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-qosDomainFormat"},"Formatting a QoS Domain"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli restore qos                                       \\\n      --sef-index 0                                              \\\n      --label "61300673829223 888776657572036"                   \\\n      --path "/tmp/SefBackup"\n$\n')),(0,a.kt)("p",null,"The above command restores a backed up QoS Domain\u2019s data stored in the sub-directory named\n",(0,a.kt)("inlineCode",{parentName:"p"},"/tmp/SefBackup")," into another QoS Domain."),(0,a.kt)("p",null,"Use of both the user address ",(0,a.kt)("inlineCode",{parentName:"p"},"allow-list")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"block-list")," options allows for customization\nof what is backed up and restored. The allow-list and block-list options expect a space-\nseparated list of hex flash addresses. The flash addresses can denote a single address or a range of\naddresses separated by a colon."),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Prerequisite: Should have a Non-empty QoS Domain. Create QoS Domain following directions\nin Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#subsec-qosDomainCreate"},"Creating a QoS Domain"),". Populate the QoS Domain using FIO explained in\nChapter ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/FIO/overview#chap-fio"},"FIO")," or Python Sell explained in Section ",(0,a.kt)("a",{parentName:"em",href:"/SEF-SDK/CLI/cli-targets#section:shell"},"Shell Target"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli backup qos                                           \\\n      --sef-index 0                                                 \\\n      --label "61300673829223 888776657572036"                      \\\n      --path "/tmp/SefBackup"                                       \\\n      --block-list "AAAA BBBB:CCCC DDDD"\n$\n')),(0,a.kt)("p",null,"The above command skips the flash addresses ",(0,a.kt)("inlineCode",{parentName:"p"},"AAAA")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"DDDD")," and the range of addresses from\n",(0,a.kt)("inlineCode",{parentName:"p"},"BBBB")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"CCCC")," while backing up the QoS Domain. ",(0,a.kt)("em",{parentName:"p"},"Note: The values ",(0,a.kt)("inlineCode",{parentName:"em"},"AAAA"),", ",(0,a.kt)("inlineCode",{parentName:"em"},"BBBB"),", ",(0,a.kt)("inlineCode",{parentName:"em"},"CCCC"),", and\n",(0,a.kt)("inlineCode",{parentName:"em"},"DDDD")," are used for simplicity and should be replaced with valid hex flash addresses.")," "),(0,a.kt)("h2",{id:"subsec-cliExFTL"},"FTL Target"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ftl")," target offers three actions: ",(0,a.kt)("inlineCode",{parentName:"p"},"info"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"check"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"configure"),". The ",(0,a.kt)("inlineCode",{parentName:"p"},"configure")," action is\nused to configure the Reference FTL by setting the over-provisioning percentage. Only an empty\nQoS Domain can be configured. This action supports the ",(0,a.kt)("inlineCode",{parentName:"p"},"--force / -f")," flag to configure the\nreference FTL without asking for confirmation."),(0,a.kt)("p",null,"The following command configures the reference FTL for QoS Domain 2 with 20% of over-provisioning."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli configure ftl                                    \\\n      --sef-index 0                                             \\\n      --label "61300673829223 888776657572036"                  \\\n      --overprovisioning 20                                     \\\n      --force --verbose\nThe QoS Domain 1 was successfully configured by SDK\n$\n')),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"info")," action can be used to print detailed information about a configured QoS Domain."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli info FTL                                      \\\n      --sef-index 0                                          \\\n      --label "61300673829223 888776657572036"               \\\n      --verbose\naduSize: 4096\nnumPlacementIDs: 1\nsuperBlockSize: 28672\nsuperPageSize: 16\ncapacity: 335868\noverprovisioning: 20\nnumDomains: 1\nRecreate Command:\nsef-cli configure sdk -s 0 -q 1 --overprovisioning 20\n$\n')),(0,a.kt)("p",null,"The health of the reference FTL may be checked using the check action. The check action can\nonly be performed on a configured QoS Domain. If the FTL is found to be faulty, this action may\nbe used to repair the device when given the ",(0,a.kt)("inlineCode",{parentName:"p"},"--should-repair")," flag. The below command checks\nthe health of the reference FTL. Keep in mind that the reference FTL should not be running while\nexecuting the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'$ sudo sef-cli check FTL                                     \\\n      --sef-index 0                                          \\\n      --label "61300673829223 888776657572036"               \\\n      --verbose\nThe SEF SDK was not broken and does not need repair\n$\n')),(0,a.kt)("h2",{id:"section:shell"},"Shell Target: Using an SEF Unit Interactively"),(0,a.kt)("p",null,"A unique feature of the SEF-CLI is the interactive Python 3 shell. SEF-CLI expands the Python\nfunctionality by defining a custom Python module used to interact with the SEF Unit."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"sefCliHelp")," function may be used to print the help function within the shell.\nThe following is a simple example of how to interact with the built-in Python 3 shell."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo sef-cli interactive shell\n>>> sefCli has been loaded, use sefCliHelp() to learn about its use cases\n>>> use function quit() to exit the interactive mode\n[<qos>@<sef>] >>> listSEF()                   #Lists sef units\n[0, 1, 2]\n[<qos>@<sef>] >>> selectSEF(0)                #Selects sef unit 0 to interact with\n[<qos>@        0] >>> listQoS()               #Lists QoS Domains and if they are open\n[(3, False)]\n[<qos>@        0] >>> openQoS(3)              #Opens QoS Domain to interact with\n[      3@      0] >>> quit()                  #Shuts down the shell\n$\n")),(0,a.kt)("p",null,"Moreover, the Python shell can be used to execute a Python script to interact with SEF Units\nusing the ",(0,a.kt)("inlineCode",{parentName:"p"},"execute")," action. The following command executes a Python 3 script stored in the file\n",(0,a.kt)("inlineCode",{parentName:"p"},"script.py"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo sef-cli execute shell --python-script script.py\n")))}p.isMDXComponent=!0},3259:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/virtual-device-create-auto-e2b5c54324088736e44cdb53fe3dab0a.png"},5562:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/virtual-device-create-manual-11a0c20df1d284edb5ce9f5f43dd6af8.png"}}]);