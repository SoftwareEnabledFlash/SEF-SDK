"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[673],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=a.createContext({}),s=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(d.Provider,{value:n},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(t),m=i,f=c["".concat(d,".").concat(m)]||c[m]||p[m]||r;return t?a.createElement(f,o(o({ref:n},u),{},{components:t})):a.createElement(f,o({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},187:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const r={sidebar_position:0},o="NVMe-CLI",l={unversionedId:"NVMe-CLI/overview",id:"NVMe-CLI/overview",title:"NVMe-CLI",description:"chap-NvmeCli}",source:"@site/docs/NVMe-CLI/overview.md",sourceDirName:"NVMe-CLI",slug:"/NVMe-CLI/overview",permalink:"/SEF-SDK/NVMe-CLI/overview",draft:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"docs",previous:{title:"QEMU",permalink:"/SEF-SDK/QEMU/overview"}},d={},s=[{value:"SEF Info",id:"sef-info",level:2},{value:"Virtual Device",id:"virtual-device",level:2},{value:"Create",id:"create",level:3},{value:"Info",id:"info",level:3},{value:"Delete Virtual Device",id:"delete-virtual-device",level:3},{value:"Create Capacity Configuration",id:"create-capacity-configuration",level:3},{value:"Cap Config List",id:"cap-config-list",level:3},{value:"Select Cap Config",id:"select-cap-config",level:3},{value:"Set Number of Dies for Virtual Device",id:"set-number-of-dies-for-virtual-device",level:3},{value:"Set Number of pSLC blocks for a Virtual Device",id:"set-number-of-pslc-blocks-for-a-virtual-device",level:3},{value:"QoS Domain",id:"qos-domain",level:2},{value:"Create QoS Domain",id:"create-qos-domain",level:3},{value:"Delete QoS Domain",id:"delete-qos-domain",level:3},{value:"QoS Domain Info",id:"qos-domain-info",level:3},{value:"QoS Domain Capacity",id:"qos-domain-capacity",level:3},{value:"QoS Domain Weights (Read/Program)",id:"qos-domain-weights-readprogram",level:3},{value:"Change QoS Domain Read Deadline",id:"change-qos-domain-read-deadline",level:3},{value:"Maximum Number of Open Super Blocks",id:"maximum-number-of-open-super-blocks",level:3},{value:"QoS Domain Read Queue",id:"qos-domain-read-queue",level:3},{value:"Set Root QoS Pointer",id:"set-root-qos-pointer",level:3},{value:"FIFO",id:"fifo",level:2},{value:"Attach a read FIFO",id:"attach-a-read-fifo",level:3},{value:"Detach a read FIFO",id:"detach-a-read-fifo",level:3},{value:"List available read FIFOs",id:"list-available-read-fifos",level:3},{value:"List a specific read FIFO",id:"list-a-specific-read-fifo",level:3},{value:"Super Block",id:"super-block",level:2},{value:"Super Block Info",id:"super-block-info",level:3},{value:"Superblock List",id:"superblock-list",level:3},{value:"Superblock management",id:"superblock-management",level:3},{value:"User Address List",id:"user-address-list",level:3},{value:"Address Change Order",id:"address-change-order",level:3},{value:"Write",id:"write",level:2},{value:"Read",id:"read",level:2},{value:"Copy",id:"copy",level:2},{value:"Get Log",id:"get-log",level:2},{value:"Asynchronous event change request",id:"asynchronous-event-change-request",level:2}],u={toc:s},c="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"chap-NvmeCli"},"NVMe-CLI"),(0,i.kt)("p",null,"The nvme-cli has been modified to support SEF Units with the addition of the ",(0,i.kt)("inlineCode",{parentName:"p"},"Kioxia")," plugin."),(0,i.kt)("p",null,"The nvme-cli allows the user to interact with a SEF Unit at a low level without using the library;\nhowever, it does not provide as much functionality or user friendliness as SEF-CLI."),(0,i.kt)("p",null,"After installing the SEF nvme-cli command, you will be able to execute the following commands."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"usage: nvme kioxia <command> [<device>] [<args>]\n\n\nThe following are all implemented sub-commands:\n  sef-info                      SEF Unit Information\n  create-vd                     Create a Virtual Device\n  create-cap-cfg                Create a Capacity Configuration\n  sel-cap-cfg                   Select a Capacity Configuration\n  delete-vd                     Delete a Virtual Device\n  create-qosd                   Create a QoS Domain\n  delete-qosd                   Delete a QoS Domain\n  setroot-qosd                  Set Rootpointer to QoS Domain\n  change-cap-qosd               Change the capacity of a QoS Domain\n  change-weights-qosd           Change the weights of a QoS Domain\n  read-deadline-qosd            Change the read deadline for a QoS Domain\n  max-open-sb-qosd              Change the max number of open Super Blocks on a QoS Domain\n  def-rq-qosd                   Change the read queue for a QoS Domain\n  vd-info                       Virtual Device Information\n  qd-info                       QosD Info\n  cap-cfg-list                  Capacity Config List\n  sb-info                       Super Block Information\n  sb-list                       Super Block List\n  ua-list                       User Address List\n  aco-list                      Address Change Order\n  rf-list-log                   Read Fifo List\n  rf-attach                     Attach Read Fifo to virtual domain\n  rf-detach                     Detach Read Fifo from virtual domain\n  vd-set-ndies                  Set the number of dies for a virtual domain\n  vd-set-pslc                   Set the pSLC blocks for a virtual domain\n  read                          Submit Read command, return results\n  write                         Submit FLA Request and NLW command, return results\n  copy                          Submit NLC command, return results\n  sb-manage                     Super Block Management\n  aen-rq                        Asynchronous event change request\n")),(0,i.kt)("h2",{id:"sef-info"},"SEF Info"),(0,i.kt)("p",null,"Get the SEF Unit Information."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ nvme kioxia sef-info /dev/nvme0\nSEF Capability Supports:\n           Packed ADU Offset\n           List indicated Nameless Copy command\n           Super Block operated with Nameless Write and Nameless Copy\n              commands\n           pSLC Super Block\nNumber of Channels: 4\nNumber of Banks: 4\nNumber of Blocks per Die: 1958\nNumber of Pages per Block: 384\nNumber of Planes per Page: 6\nPlane Data Size: 14\nExpiration Open Period: 43200\nNumber of Placement IDs: 8\nMax Number of Open Super Blocks: 2048\nNumber of Read FIFOs: 256\nNumber of Pages to Secure Integrity: 0\n\n\n----DYNAMIC INFORMATION----\nNumber of Read FIFOs in Use: 0\nNumber of Virtual Devices: 0\nNumber of QoS Domains: 0\n$\n")),(0,i.kt)("h2",{id:"virtual-device"},"Virtual Device"),(0,i.kt)("h3",{id:"create"},"Create"),(0,i.kt)("p",null,"The create-vd command requires a Virtual Device descriptor file For example, this will create 1\nVirtual Device spanning 4 dies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'cd <path to SEF_SDK>/lib\ndevtool/script_for_cli/gen_create_cap_cfg.sh -f VDFD.out -d "1 1 1 1"\nnvme kioxia create-vd /dev/nvme0 -f\n      devtool/script_for_cli/data/VDFD.out\n')),(0,i.kt)("h3",{id:"info"},"Info"),(0,i.kt)("p",null,"Get the Virtual Device Information."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ nvme kioxia vd-info /dev/nvme0 -v 1 -n 16\nVDID                    1\nCritical Warning        0x0\nCWC                     7\nCESN                    0\nMAX_PE                  0\nAVG_PE                  0\nNSBDIE                  16\nSBBW                     23\nAOBW                     23\nRPC                      0\nMXOSB                    0\nDRFID                    1\nNRF                      1\nNPBLK                    0\nVDCAP                    72105984\nVDGCAP                   0\nVDUCAP                   0\nASS_QOSD                 0\nNDIE                     15\nDIES -\n           000000 000001 000002 000003 000004 000005 000006 000007\n           000008 000009 00000a 00000b 00000c 00000d 00000e\n00000f\n$\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"VDID: Virtual Device ID"),(0,i.kt)("li",{parentName:"ul"},"CWC: Critical Warning Control",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+ 7:3 - Reserved\n+ 2 - Capacity Reduction Event\n+ 1 - Out of pSLC Super Block Event\n+ 0 - Out of general Super Block Event\n"))),(0,i.kt)("li",{parentName:"ul"},"CESN: Current Erase Serial Number"),(0,i.kt)("li",{parentName:"ul"},"MAX_PE: Maximum Program/Erase Count"),(0,i.kt)("li",{parentName:"ul"},"AVG_PE: Average Program/Erase Count"),(0,i.kt)("li",{parentName:"ul"},"NSBDIE: Number of Dies per Super Block"),(0,i.kt)("li",{parentName:"ul"},"SBBW: SuperBlock Bit Width"),(0,i.kt)("li",{parentName:"ul"},"AOBW: ADU Offset Bit Width",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"+ SBBW and AOBW determine the appearance of the SEFFlashAddress\n+ Together they can add up to 64 or no less than 32-bits.\n+ For example: SBBW = 16, AOBW = 32\n+ Super Block bits: x, ADU Offset bits: y\n+ SEFFlashAddress: 0000 xxxx yyyy yyyy\n"))),(0,i.kt)("li",{parentName:"ul"},"RPC: Recommended Patrol Cycle"),(0,i.kt)("li",{parentName:"ul"},"MAXOSB: Maximum Number of Open Super Blocks"),(0,i.kt)("li",{parentName:"ul"},"DRFID: Default Read FIFO ID"),(0,i.kt)("li",{parentName:"ul"},"NRF: Number of Read FIFOs"),(0,i.kt)("li",{parentName:"ul"},"NPBLK: Number of pSLC Blocks"),(0,i.kt)("li",{parentName:"ul"},"VDCAP: Virtual Device Total Capacity"),(0,i.kt)("li",{parentName:"ul"},"VDGCAP: Virtual Device Guaranteed Capacity"),(0,i.kt)("li",{parentName:"ul"},"VDUCAP: Virtual Device In-use Capacity"),(0,i.kt)("li",{parentName:"ul"},"ASS_QOSD: Number of QoS Domains assigned"),(0,i.kt)("li",{parentName:"ul"},"NDIE: Number of Dies"),(0,i.kt)("li",{parentName:"ul"},"DIES: List of Die IDs")),(0,i.kt)("h3",{id:"delete-virtual-device"},"Delete Virtual Device"),(0,i.kt)("p",null,"Delete specific Virtual Device by ID or use ",(0,i.kt)("inlineCode",{parentName:"p"},"0xffff")," to delete all Virtual Devices."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia delete-vd /dev/nvme0 -v 0xffff\n")),(0,i.kt)("h3",{id:"create-capacity-configuration"},"Create Capacity Configuration"),(0,i.kt)("p",null,"Create a capacity configuration that assigns a Virtual Device ID to each die on the SEF Unit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'cd <path to SEF_SDK>/lib\ndevtool/script_for_cli/gen_create_cap_cfg.sh -f CAPCFG.ld2 -d "\n      1 1 2 2 2 2 0 0 \\\n      1 1 2 2 2 2 0 0 \\\n      1 1 3 3 3 3 0 0 \\\n      1 1 3 3 3 3 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0 \\\n      0 0 0 0 0 0 0 0";\nnvme kioxia create-cap-cfg /dev/nvme0 -f\n      devtool/script_for_cli/data/CAPCFG.ld2\n')),(0,i.kt)("h3",{id:"cap-config-list"},"Cap Config List"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ nvme kioxia cap-cfg-list /dev/nvme0\nCCI                     1\nDI                      0\nEGCN               16\n     ENDGID             1\n     CAF                0\n     EGSETS             0\n     EGCHANS            1\n            CI                            -1\n            CHMUS                    1\n              MU        0,   ML            0\n...\n$\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"CCI: Capacity Configuration Index"),(0,i.kt)("li",{parentName:"ul"},"DI: Domain Identifier"),(0,i.kt)("li",{parentName:"ul"},"EGCN: Endurance Group Channel Number"),(0,i.kt)("li",{parentName:"ul"},"ENDGID: Endurance Group ID"),(0,i.kt)("li",{parentName:"ul"},"CAF: Capacity Adjustment Factor"),(0,i.kt)("li",{parentName:"ul"},"EGSETS: Number of NVM Sets"),(0,i.kt)("li",{parentName:"ul"},"EGCHANS: Number of Channels"),(0,i.kt)("li",{parentName:"ul"},"CI: Channel Identifier"),(0,i.kt)("li",{parentName:"ul"},"CHMUS: Number of Channel Media Units"),(0,i.kt)("li",{parentName:"ul"},"MU: Media Unit Identifier"),(0,i.kt)("li",{parentName:"ul"},"ML: Media Unit Descriptor Length")),(0,i.kt)("h3",{id:"select-cap-config"},"Select Cap Config"),(0,i.kt)("p",null,"After creating a secondary capacity configuration, swap between them."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia sel-cap-cfg /dev/nvme0 -c 2\n")),(0,i.kt)("h3",{id:"set-number-of-dies-for-virtual-device"},"Set Number of Dies for Virtual Device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia vd-set-ndies /dev/nvme0 -v1 -n8\n")),(0,i.kt)("h3",{id:"set-number-of-pslc-blocks-for-a-virtual-device"},"Set Number of pSLC blocks for a Virtual Device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia vd-set-pslc /dev/nvme0 -v1 -n10\n")),(0,i.kt)("h2",{id:"qos-domain"},"QoS Domain"),(0,i.kt)("p",null,"A Virtual Device should be created before the following actions can be performed."),(0,i.kt)("h3",{id:"create-qos-domain"},"Create QoS Domain"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd <path to SEF_SDK>/lib\ndevtool/script_for_cli/gen_create_qosd_bin.sh -v 1 -s 0 -p 8 -c 50000\n      -f QOSFD.out\nnvme kioxia create-qosd /dev/nvme0 -q 1 -f\n      devtool/script_for_cli/data/QOSFD.out\n")),(0,i.kt)("h3",{id:"delete-qos-domain"},"Delete QoS Domain"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme detach-ns /dev/nvme0 -n1 -c1\nnvme kioxia delete-qosd /dev/nvme0 -q 1\n")),(0,i.kt)("h3",{id:"qos-domain-info"},"QoS Domain Info"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ nvme kioxia qd-info /dev/nvme0 -q 1\nQoS Domain Size:                 288276504\nQoS Domain Capacity:             288276504\nQoS Domain Utilization:          0\nVirtual Device ID:               1\nRead Deadline:                   0\nDefect Management Type:          0\nNumber of PLIDs(0\u2019s):     0\nMax Open SuperBlocks:     0\nWrite Weight:             0\nErase Weight:             1\nDefault Read FIFO ID:     257\nSuperBlock Statistics\n    Max Planes:           18449696256\n    Guaranteed Planes:    18449696256\n    Current Planes:       0\n    Active SuperBlocks:   0\n    Open SB for NLW:      0\n    Open SB for Erase:    0\npSLC SuperBlock Statistics\n    Max Planes:           0\n    Guaranteed Planes:    0\n    Current Planes:       0\n    Active SuperBlocks:   0\n    Open SB for NLW:      0\n    Open SB for Erase:    0\nRoot Pointer 0:           0x0\n...\n$\n")),(0,i.kt)("h3",{id:"qos-domain-capacity"},"QoS Domain Capacity"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia change-cap-qosd /dev/nvme0 -q1 -t0 -g4096\n")),(0,i.kt)("h3",{id:"qos-domain-weights-readprogram"},"QoS Domain Weights (Read/Program)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia change-weights-qosd /dev/nvme0 -q1 -e100 -w100\n")),(0,i.kt)("h3",{id:"change-qos-domain-read-deadline"},"Change QoS Domain Read Deadline"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia read-deadline-qosd /dev/nvme0 -q1 -r2\n")),(0,i.kt)("h3",{id:"maximum-number-of-open-super-blocks"},"Maximum Number of Open Super Blocks"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia max-open-sb-qosd /dev/nvme0 -q1 -m256\n")),(0,i.kt)("h3",{id:"qos-domain-read-queue"},"QoS Domain Read Queue"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia def-rq-qosd /dev/nvme0 -q1 -r8\n")),(0,i.kt)("h3",{id:"set-root-qos-pointer"},"Set Root QoS Pointer"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia setroot-qosd /dev/nvme0 -q1 -f 0x0002000100000000 -i0\n")),(0,i.kt)("h2",{id:"fifo"},"FIFO"),(0,i.kt)("p",null,"A Virtual Device should be created before the following actions can be performed."),(0,i.kt)("h3",{id:"attach-a-read-fifo"},"Attach a read FIFO"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia rf-attach /dev/nvme0 -v 1 -f 2 -w 0x32\n")),(0,i.kt)("h3",{id:"detach-a-read-fifo"},"Detach a read FIFO"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia rf-detach /dev/nvme0 -v 1 -f 2 -w 0x32\n")),(0,i.kt)("h3",{id:"list-available-read-fifos"},"List available read FIFOs"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ nvme kioxia rf-list /dev/nvme0 -v1 -n128\nFifo Id = 0000000001, VD Id = 000001, Weight = 000032\nFifo Id = 0000000002, VD Id = 000002, Weight = 000064\n...\n$\n")),(0,i.kt)("h3",{id:"list-a-specific-read-fifo"},"List a specific read FIFO"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ nvme kioxia rf-list-log /dev/nvme0 -v 1 -f 1 -l 8\nFifo Id = 0000000001, VD Id = 000001, Weight = 000032\n$\n")),(0,i.kt)("h2",{id:"super-block"},"Super Block"),(0,i.kt)("p",null,"An available Super Block is required to perform the following commands."),(0,i.kt)("h3",{id:"super-block-info"},"Super Block Info"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ nvme kioxia sb-info /dev/nvme0 -v 1 -s 10\nVDID                 : 1\nST                   : <State>\nSBS                  : NLW (04)\nSBID                 : 0x00000001\nPID                  : 0\nQOSDID                 : 1\nPECI                   : 192\nDII                    : Reserved (55)\nTL                     : 0\nCAP                    : 147456\nADUPTR                 : 00000018\nESN                    : 00000001\nDGID                   : 0\nNDPL                   : 0\nDBM                                :\n...\n$\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"VDID: Vritual Device ID"),(0,i.kt)("li",{parentName:"ul"},"ST: State Transition"),(0,i.kt)("li",{parentName:"ul"},"SBS: Super Block State"),(0,i.kt)("li",{parentName:"ul"},"SBID: Super Block ID"),(0,i.kt)("li",{parentName:"ul"},"PID: Placement ID"),(0,i.kt)("li",{parentName:"ul"},"QOSDID: QoS Domain ID"),(0,i.kt)("li",{parentName:"ul"},"PECI: Program/Erase Count Index"),(0,i.kt)("li",{parentName:"ul"},"DII: Data Integrity Index"),(0,i.kt)("li",{parentName:"ul"},"TL: Time Left"),(0,i.kt)("li",{parentName:"ul"},"CAP: Capacity"),(0,i.kt)("li",{parentName:"ul"},"ADUPTR: ADU Pointer"),(0,i.kt)("li",{parentName:"ul"},"ESN: Erase Serial Number"),(0,i.kt)("li",{parentName:"ul"},"DGID: Die Group ID"),(0,i.kt)("li",{parentName:"ul"},"NDPL: Number of Defective Planes"),(0,i.kt)("li",{parentName:"ul"},"DBM: Defect Bitmap")),(0,i.kt)("h3",{id:"superblock-list"},"Superblock List"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ nvme kioxia sb-list /dev/nvme0 -q1 -l 0 -s 40 -o0\nSB-1, PECI = 1, DII = 4\n...\n$\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"SB: Super Block ID"),(0,i.kt)("li",{parentName:"ul"},"PECI: Program/Erase Count Index"),(0,i.kt)("li",{parentName:"ul"},"DII: Data Integrity Index")),(0,i.kt)("h3",{id:"superblock-management"},"Superblock management"),(0,i.kt)("p",null,"Operation:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"0: Erase"),(0,i.kt)("li",{parentName:"ul"},"1: Close"),(0,i.kt)("li",{parentName:"ul"},"2: Free"),(0,i.kt)("li",{parentName:"ul"},"3: Patrol"),(0,i.kt)("li",{parentName:"ul"},"4: Flush")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia sb-manage -q 1 -s 10 -o 1 /dev/nvme0\n")),(0,i.kt)("h3",{id:"user-address-list"},"User Address List"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"$ nvme kioxia ua-list /dev/nvme0 -q1 -s 10 -l4096 -o0\n00000000: UA-00000000, METADATA = 00000001 00000002\n00000001: UA-00000003, METADATA = ffffffffffffffff ffffffffffffffff\n...\n$\n")),(0,i.kt)("h3",{id:"address-change-order"},"Address Change Order"),(0,i.kt)("p",null,"Note: If there are no ACO\u2019s, the output will be blank."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"nvme kioxia aco-list /dev/nvme0 -q1 -s0 -l4096 -o0\n")),(0,i.kt)("h2",{id:"write"},"Write"),(0,i.kt)("p",null,"Prerequisite: Data file that is the size of ",(0,i.kt)("inlineCode",{parentName:"p"},"<# of ADUs> * <ADU Size>")," Note: An open Super\nBlock must be closed in order to delete a QoS Domain."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'cd <path to SEF_SDK>/lib\nnvme kioxia write -a 4 -n 1 -f -D\n      devtool/nvme-cli-sef/sefWriteData_16K.txt /dev/nvme0\nOPENSB=$(nvme kioxia sb-list -q1 -l3 -s8 -o0 /dev/nvme0 | cut -d "-"\n      -f2 | cut -d "," -f1)\nnvme kioxia sb-manage -q 1 -s $OPENSB -o 1 /dev/nvme0\n')),(0,i.kt)("h2",{id:"read"},"Read"),(0,i.kt)("p",null,"Prerequisite: Issue a write command Note: A read command requires the source flash address"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'cd <path to SEF_SDK>/lib\nnvme kioxia write /dev/nvme0 -a 4 -n 1 -f -D\n      devtool/nvme-cli-sef/sefWriteData_16K.txt > WRITE.log\nSUA=$(cat WRITE.log | grep "SFLA:" | cut -d ":" -f2 | xargs)\nSUA=0x$SUA\nOPENSB=$(nvme kioxia sb-list -q1 -l3 -s8 -o0 /dev/nvme0 | cut -d "-"\n      -f2 | cut -d "," -f1)\nnvme kioxia sb-manage -q 1 -s $OPENSB -o 1 /dev/nvme0\nnvme kioxia read /dev/nvme0 -f $SUA -a 4 -d sefReadData_16K.txt -u 0\n')),(0,i.kt)("h2",{id:"copy"},"Copy"),(0,i.kt)("p",null,"Prerequisite: Issue a write command Note: A copy command requires the source flash address The\nflash address ",(0,i.kt)("inlineCode",{parentName:"p"},"0xffffffff")," indicates automatic allocation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'cd <path to SEF_SDK>/lib\nnvme kioxia write /dev/nvme0 -a 4 -n 1 -f -D\n      devtool/nvme-cli-sef/sefWriteData_16K.txt > WRITE.log\nSUA=$(cat WRITE.log | grep "SFLA:" | cut -d \u2019:\u2019 -f2 | xargs)\nSUA=0x$SUA\nOPENSB=$(nvme kioxia sb-list -q1 -l3 -s8 -o0 /dev/nvme0 | cut -d \u2019-\u2019\n      -f2 | cut -d \u2019,\u2019 -f1)\nnvme kioxia sb-manage -q 1 -s $OPENSB -o 1 /dev/nvme0\nnvme kioxia sb-manage -q 1 -s 0xffffffff -o 0 /dev/nvme0\nOPENSB=$(nvme kioxia sb-list -q1 -l3 -s16 -o0 /dev/nvme0 | cut -d \u2019-\u2019\n      -f2 | cut -d \u2019,\u2019 -f1)\nIFS="\n"\nOPENSBS=( $OPENSB )\necho open superblocks 1:${OPENSBS[0]} 2:${OPENSBS[1]}\ndevtool/script_for_cli/gen_copy_bitmap_bin.sh -a 4 -b 0 -c 0 -d 0 -e\n      $SUA -z COPY.out\nnvme kioxia copy /dev/nvme0               -q 1 -s ${OPENSBS[1]} -n 256 -b\n      devtool/script_for_cli/data/COPY.out -B\n      devtool/nvme-cli-sef/sefNlcOBitmap.bin -A\n      devtool/nvme-cli-sef/sefNlcACR.bin -R 0xffffffff\n')),(0,i.kt)("h2",{id:"get-log"},"Get Log"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"cd <path to SEF_SDK>/lib\nnvme kioxia write /dev/nvme0 -a 4 -n 1 -f -D\n      devtool/nvme-cli-sef/sefWriteData_16K.txt\nnvme kioxia get-log /dev/nvme0 -n 1 -i 0xd5 -l1024 -o0 -s0 -B0 -a0\n")),(0,i.kt)("h2",{id:"asynchronous-event-change-request"},"Asynchronous event change request"),(0,i.kt)("p",null,"Prerequisite: An event must be triggered"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Usage: nvme kioxia aen-rq <device> [OPTIONS]\n\nWait on async event notification request\n\nOptions:\n  [   --get-log, -l ]                      --- read the log after getting the event\n  [   --del-log, -d ]                      --- delete the log entry after reading\n  [   --num-events=<NUM>, -n <NUM> ]       --- number of events to wait for\n  [   --timeout=<NUM>, -t <NUM> ]          --- NVME command timeout in ms\n")))}p.isMDXComponent=!0}}]);