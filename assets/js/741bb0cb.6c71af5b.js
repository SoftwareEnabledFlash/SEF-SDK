"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[257],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),u=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=u(t.components);return a.createElement(s.Provider,{value:e},t.children)},m="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},p=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,s=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),m=u(n),p=r,g=m["".concat(s,".").concat(p)]||m[p]||d[p]||i;return n?a.createElement(g,o(o({ref:e},c),{},{components:n})):a.createElement(g,o({ref:e},c))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,o=new Array(i);o[0]=p;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[m]="string"==typeof t?t:r,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1613:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:6},o="Instrumentation",l={unversionedId:"FTL/instrumentation",id:"FTL/instrumentation",title:"Instrumentation",description:"chap-Instrumentation}",source:"@site/docs/FTL/instrumentation.md",sourceDirName:"FTL",slug:"/FTL/instrumentation",permalink:"/SEF-SDK/FTL/instrumentation",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docs",previous:{title:"Persistence",permalink:"/SEF-SDK/FTL/persistence"},next:{title:"Logging",permalink:"/SEF-SDK/FTL/logging"}},s={},u=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Instrumentation Actions",id:"tab-InstrumentationActions",level:4},{value:"Counters",id:"counters",level:2},{value:"Extending Functionality",id:"extending-functionality",level:2}],c={toc:u},m="wrapper";function d(t){let{components:e,...n}=t;return(0,r.kt)(m,(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"chap-Instrumentation"},"Instrumentation"),(0,r.kt)("p",null,"The SEF Reference FTL has a unique, built-in instrumentation system that lets the user monitor\nand change the FTL\u2019s internal properties at runtime. Because the FTL is implemented in user\nmode, this instrumentation system is the only way to obtain performance metrics for the SEF Unit.\nThe instrumentation system is exposed via a Unix Socket. It was designed with modularity in mind.\nIn other words, individual components of the Reference FTL can register and manage their own\ncommunication systems."),(0,r.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,r.kt)("p",null,"The instrumentation socket is created by default at ",(0,r.kt)("inlineCode",{parentName:"p"},"/tmp/SEFFTLDomain<sef-unit>.<qos-domain>"),"\nwhere ",(0,r.kt)("inlineCode",{parentName:"p"},"<sef-unit>")," is the SEF Unit number and ",(0,r.kt)("inlineCode",{parentName:"p"},"<qos-domain>")," is the QoS Domain ID. While\nthe Reference FTL is running, ncat can be used to communicate with instrumentation via Unix\nSockets. The following is a simple invocation to communicate with the SDK running on SEF Unit\n0\u2019s QoS Domain ID 2:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ncat -U --udp /tmp/SEFFTLDomain.0.2\n")),(0,r.kt)("p",null,"The communication is two-way; the opened socket is treated as an interactive shell. A typical\ncommand for the instrumentation shell is ",(0,r.kt)("inlineCode",{parentName:"p"},"<action> [options]")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"<action>")," is registered by a\ncomponent of the Reference FTL. To view a list of all the registered actions and how to use them,\nuse the help action. The ",(0,r.kt)("a",{parentName:"p",href:"/SEF-SDK/FTL/instrumentation#tab-InstrumentationActions"},"Instrumentation Actions")," Table includes\nthe built-in actions and their individual descriptions."),(0,r.kt)("h4",{id:"tab-InstrumentationActions"},"Instrumentation Actions"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Actions"),(0,r.kt)("th",{parentName:"tr",align:null},"Options"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"cc"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[json]")),(0,r.kt)("td",{parentName:"tr",align:null},"Dump all code coverage data")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"dump"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[json][reset][info]")),(0,r.kt)("td",{parentName:"tr",align:null},"Dump all instrumentation counters")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"gc"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[<low water>]")),(0,r.kt)("td",{parentName:"tr",align:null},"Show status of and configure garbage collect\u2019s low water value-triggers GC")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"gc"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[dynamic / static]")),(0,r.kt)("td",{parentName:"tr",align:null},"Switch from dynamic to static weighting for gc")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"getlog"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Returns log level")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setlog"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<level Number>")),(0,r.kt)("td",{parentName:"tr",align:null},"Sets the log level. Possible values are 0 to 5")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"setlog"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"<level Name>")),(0,r.kt)("td",{parentName:"tr",align:null},'Sets the log level. Possible values are "trace", "debug", "info", "error", "fatal", "nolog"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"[json][info]")),(0,r.kt)("td",{parentName:"tr",align:null},"Dump all I/O state data or set weight")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"help"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Prints help")))),(0,r.kt)("h2",{id:"counters"},"Counters"),(0,r.kt)("p",null,"One of the built-in actions for the instrumentation system is counters. The built-in counters\nkeep track of various instrumentation data, such as numbers of reads and writes. Similar to\nthe instrumentation system, individual components of the Reference FTL can register counters.\nThe dump and state actions expose counter information. These actions can return data in a\nJSON format when given the json option. For a detailed list of the registered counters and their\ndescriptions, both actions support an info option. Moreover, dump supports the reset option to\nreset the counters\u2019 values."),(0,r.kt)("h2",{id:"extending-functionality"},"Extending Functionality"),(0,r.kt)("p",null,"Extensibility is one of the main design features of the instrumentation system. The instrumentation\ncan be extended by registering new actions and counters after initializing it. The registered actions\nare called using their callback functions after the registered keyword is received via the Unix Socket.\nThe registered counters are managed by the instrumentation system; however, an optional update\nfunction can be used to update the values when the corresponding action is called."))}d.isMDXComponent=!0}}]);