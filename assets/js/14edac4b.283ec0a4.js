"use strict";(self.webpackChunkweb_doc=self.webpackChunkweb_doc||[]).push([[605],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var o=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,l=function(e,t){if(null==e)return{};var n,o,l={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var g=o.createContext({}),s=function(e){var t=o.useContext(g),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=s(e.components);return o.createElement(g.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,g=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=s(n),p=l,f=u["".concat(g,".").concat(p)]||u[p]||d[p]||i;return n?o.createElement(f,r(r({ref:t},c),{},{components:n})):o.createElement(f,r({ref:t},c))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=p;var a={};for(var g in t)hasOwnProperty.call(t,g)&&(a[g]=t[g]);a.originalType=e,a[u]="string"==typeof e?e:l,r[1]=a;for(var s=2;s<i;s++)r[s]=n[s];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4021:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>r,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>s});var o=n(7462),l=(n(7294),n(3905));const i={sidebar_position:7},r="Logging",a={unversionedId:"FTL/logging",id:"FTL/logging",title:"Logging",description:"chap-Logging}",source:"@site/docs/FTL/logging.md",sourceDirName:"FTL",slug:"/FTL/logging",permalink:"/SEF-SDK/FTL/logging",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"docs",previous:{title:"Instrumentation",permalink:"/SEF-SDK/FTL/instrumentation"},next:{title:"SEF FTL Public API",permalink:"/SEF-SDK/FTL/ftl-api"}},g={},s=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Custom Logger",id:"custom-logger",level:2},{value:"Default File Logger",id:"default-file-logger",level:2}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"chap-Logging"},"Logging"),(0,l.kt)("p",null,"The logging service was built with customization in mind. In other words, the user can provide their\nown logging system while initializing the block layer or use the built-in file logger. The default file\nlogger appends log messages from each caller to a shared log file. By default, these files are located\nat ",(0,l.kt)("inlineCode",{parentName:"p"},"/tmp/SEFLog.<unit>.<domain>")," where ",(0,l.kt)("inlineCode",{parentName:"p"},"<unit>")," is an SEF Unit number and ",(0,l.kt)("inlineCode",{parentName:"p"},"<domain>")," is\na QoS Domain ID."),(0,l.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,l.kt)("p",null,"The supported log levels include the following, in order from most verbose to least: Trace, Debug,\nInfo, Error, Fatal, or no log. By default, each instance is set to log messages at levels Trace and\nabove. The level for logged messages can be changed after initialization."),(0,l.kt)("p",null,"The level of logging for an already-initialized instance should be accessed only using the public\nsetters and getters, by calling either ",(0,l.kt)("inlineCode",{parentName:"p"},"LogSetLevel()")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"LogSetLevelByName()"),". In the case of\ncalling the public setters and getters, the dispatch function to change the log level is called and the\nlocal copy of the log level is changed."),(0,l.kt)("p",null,"To create new log entries, use the following function calls with their respective levels:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"LogTrace(LogHandle, ...)\nLogDebug(LogHandle, ...)\nLogInfo(LogHandle, ...)\nLogError(LogHandle, ...)\nLogFatal(LogHandle, ...)\n")),(0,l.kt)("p",null,"The logging macros will not call the log dispatch if the log level is higher than the current level.\nHowever, the dispatch function can be called directly to avoid the local level check."),(0,l.kt)("h2",{id:"custom-logger"},"Custom Logger"),(0,l.kt)("p",null,"A custom logger can be used instead of the built-in file logger. In other words, to use a custom log\nfunction, the caller should provide a log handle with an ",(0,l.kt)("inlineCode",{parentName:"p"},"iLogger")," dispatch. While changing the log\nlevel or logging, the provided dispatch functions are called in order to update their log level or add\na log."),(0,l.kt)("h2",{id:"default-file-logger"},"Default File Logger"),(0,l.kt)("p",null,"The default file logger is initialized when the logHandle is not passed in while initializing the SEF\nReference FTL. Moreover, an instance of the built-in file logger can be passed in while initializing if\na custom log path is needed."),(0,l.kt)("p",null,"Each line in an output log file holds timestamped information about the level of the logging call\n(Trace, Debug, Info, Error, or Fatal), the calling function within a source code file and its line\nnumber, and the logging message itself."),(0,l.kt)("p",null,"Log files are not deleted automatically; information from previous calls will persist in log files inside\nof the ",(0,l.kt)("inlineCode",{parentName:"p"},"/tmp")," directory (by default) until these files are manually removed and new files generate or\nare auto-generated."))}d.isMDXComponent=!0}}]);